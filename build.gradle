apply plugin: 'java'
apply plugin: 'com.google.protobuf'
apply plugin: 'maven-publish'

// Generate IntelliJ IDEA's .idea & .iml project files
apply plugin: 'idea'

// Generate Visual Studio Code .vscode & .json project files
apply plugin: "visual-studio"

// Provide convenience executables for trying out the examples.
apply plugin: 'application'

buildscript {
    repositories {
        maven { // The google mirror is less flaky than mavenCentral()
            url "https://maven-central.storage-download.googleapis.com/repos/central/data/"
        }
    }
    dependencies { // ASSUMES GRADLE 2.12 OR HIGHER. Use plugin version 0.7.5 with earlier
        // gradle versions
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.11'
    }
}

repositories {
    maven { // The google mirror is less flaky than mavenCentral()
        url "https://maven-central.storage-download.googleapis.com/repos/central/data/"
    }
    mavenCentral()
    mavenLocal()
}

ext {
    adempiereVersion = '3.9.4-rc-1.0.6'
	javaMainClass = "org.spin.server.AllInOneServices"
}

//sourceCompatibility = 1.8
//targetCompatibility = 1.8
def libraryVersion = '1.0.0'
// IMPORTANT: You probably want the non-SNAPSHOT version of gRPC. Make sure you
// are looking at a tagged version of the example and not "master"!

// Feel free to delete the comment at the next line. It is just for safely
// updating the version in our release process.
def grpcVersion = '1.17.0' // CURRENT_GRPC_VERSION
def nettyTcNativeVersion = '2.0.17.Final'
def protobufVersion = '3.5.1'
def protocVersion = '3.5.1-1'
//def adempiereBaseVersion = '3.9.4-rc-1.0.6'

dependencies {
    implementation fileTree(
        dir: 'dependencies',
        include: [
            '*.jar'
        ]
    )

	implementation "com.google.api.grpc:proto-google-common-protos:1.0.0"
    implementation "io.grpc:grpc-alts:${grpcVersion}"
    implementation "io.grpc:grpc-netty-shaded:${grpcVersion}"
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    implementation "javax.annotation:javax.annotation-api:1.3.2"

    // Used in HelloWorldServerTls
    implementation "io.grpc:grpc-netty:${grpcVersion}"
    implementation "io.netty:netty-tcnative-boringssl-static:${nettyTcNativeVersion}"

    implementation "com.google.protobuf:protobuf-java-util:${protobufVersion}"

    testImplementation "io.grpc:grpc-testing:${grpcVersion}"
    testImplementation "junit:junit:4.12"
    testImplementation "org.mockito:mockito-core:1.9.5"
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.0.1'
	implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.11.0'
	implementation 'com.itextpdf:itext-pdfa:5.5.2'
	implementation 'com.lowagie:itext:2.1.7'


	//	ADempiere Core
	implementation 'io.github.adempiere:base:3.9.4-rc-1.0.6'
	implementation 'io.github.adempiere:point-of-sales:3.9.4-rc-1.0.6'
	implementation 'io.github.adempiere:store:3.9.4-rc-1.0.6'
	implementation 'io.github.adempiere:distribution:3.9.4-rc-1.0.6'
	implementation 'io.github.adempiere:freight:3.9.4-rc-1.0.6'
	implementation 'io.github.adempiere:store:3.9.4-rc-1.0.6'
	implementation 'io.github.adempiere:human-resource-and-payroll:3.9.4-rc-1.0.6'
	implementation 'io.github.adempiere:extend:3.9.4-rc-1.0.6'
	implementation 'io.github.adempiere:migration:3.9.4-rc-1.0.6'
	implementation 'io.github.adempiere:asset:3.9.4-rc-1.0.6'
	implementation 'io.github.adempiere:crm:3.9.4-rc-1.0.6'
	implementation 'io.github.adempiere:production:3.9.4-rc-1.0.6'
	implementation 'io.github.adempiere:project:3.9.4-rc-1.0.6'
	implementation 'io.github.adempiere:request:3.9.4-rc-1.0.6'
	implementation 'io.github.adempiere:adempiere.test:3.9.4-rc-1.0.6'
	implementation 'io.github.adempiere:cashflow:3.9.4-rc-1.0.6'
	implementation 'io.github.adempiere:manufacturing:3.9.4-rc-1.0.6'
	implementation 'io.github.adempiere:wms:3.9.4-rc-1.0.6'
	implementation 'io.github.adempiere:openid-authentication:3.9.4-rc-1.0.6'
	implementation 'io.github.adempiere:investment-and-loan:3.9.4-rc-1.0.6'
	implementation 'io.github.adempiere:time-and-attendance:3.9.4-rc-1.0.6'
	implementation 'io.github.adempiere:loan:3.9.4-rc-1.0.6'
	implementation 'io.github.adempiere:discord-notifier:3.9.4-rc-1.0.6'
	implementation 'io.github.adempiere:telegram-notifier:3.9.4-rc-1.0.6'
	implementation 'io.github.adempiere:tools:3.9.4-rc-1.0.6'
	implementation 'io.github.adempiere:jasperreports:3.9.4-rc-1.0.6'
	

	// ADempiere External Libraries
	// implementation 'io.vavr:vavr:1.0.0-alpha-4'
	implementation 'com.github.jjYBdx4IL:ecs:1.4.2.1'
	implementation 'org.telegram:telegrambots:6.0.1'
}

protobuf {
    protoc { artifact = "com.google.protobuf:protoc:${protocVersion}" }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
    }
    generateProtoTasks {
        all()*.plugins { grpc {} }
    }
}

// Inform IDEs like IntelliJ IDEA, Eclipse or NetBeans about the generated code.
sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
            srcDirs 'src/main/proto'
        }
    }
}

startScripts.enabled = false

run {
	doFirst {
		// Set environment variables
		environment 'ADEMPIERE_APPS_TYPE', 'wildfly'
	}
	args = [
		"resources/standalone.yaml"
	]
}

application {
	// mainClass = javaMainClass
	mainClass.set(javaMainClass)
}
jar {
	manifest {
		attributes(
			'Main-Class': javaMainClass
		)
	}
}

task ADempiereAllInOne(type: CreateStartScripts) {
	mainClass = javaMainClass
    applicationName = 'adempiere-all-in-one-server'
    defaultJvmOpts = Arrays.asList("-DPropertyFile=Adempiere.properties", "-Dorg.adempiere.server.embedded=true")
    outputDir = new File(project.buildDir, 'tmp')
    classpath = jar.outputs.files + project.configurations.runtimeClasspath
}

applicationDistribution.into('bin') {
	from(ADempiereAllInOne)
    fileMode = 0755
}

//	Create release for project
task createRelease(type: Copy) {
   dependsOn build
   from file("$buildDir/distributions/")
   into file("$buildDir/release/")
   //destinationDir(file('build/release/'))
   doLast {
        file('build/release/')
        	.listFiles({file -> file.isFile()} as FileFilter).sort()
        	.each { File file ->
            ant.checksum file: file
        }
   	}
}

publishing {
    repositories {
        maven {
            url = "https://maven.pkg.github.com/erpcya/Repository"
            credentials {
                username = System.properties['deploy.user'] ?: System.getenv("GITHUB_DEPLOY_USER")
                password = System.properties['deploy.token'] ?: System.getenv("GITHUB_DEPLOY_TOKEN")
            }
        }
    }
    publications {
		mavenJava(MavenPublication) {
        	groupId 'org.erpya.adempiere'
            artifactId 'backend'
            version libraryVersion
           	from components.java
           	pom {
                name = 'gRPC Server for ADempiere'
                description = 'A gRPC Server based on ADempiere Persistence Object'
                url = 'https://www.erpya.com/'
                licenses {
                    license {
                        name = 'GNU General Public License v3.0'
                        url = 'https://www.gnu.org/licenses/gpl-3.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'yamelsenih'
                        name = 'Yamel Senih'
                        email = 'ysenih@erpya.com'
                    }
                }
            }
		}
	}
}
