/************************************************************************************
 * Copyright (C) 2018-present E.R.P. Consultores y Asociados, C.A.                  *
 * Contributor(s): Edwin Betancourt EdwinBetanc0urt@outlook.com                     *
 * This program is free software: you can redistribute it and/or modify             *
 * it under the terms of the GNU General Public License as published by             *
 * the Free Software Foundation, either version 2 of the License, or                *
 * (at your option) any later version.                                              *
 * This program is distributed in the hope that it will be useful,                  *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of                   *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the                     *
 * GNU General Public License for more details.                                     *
 * You should have received a copy of the GNU General Public License                *
 * along with this program. If not, see <https://www.gnu.org/licenses/>.            *
 ************************************************************************************/
syntax = "proto3";


option java_multiple_files = true;
option java_package = "org.spin.backend.grpc.general_ledger";
option java_outer_classname = "ADempiereGeneralLedger";

import "google/api/annotations.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";

import "base_data_type.proto";

// Base URL
// /general-ledger/

package general_ledger;

// The General Ledger service definition.
service GeneralLedger {
	// Accounting Element
	rpc ListAccountingElements(ListAccountingElementsRequest) returns (ListAccountingElementsResponse) {
		option (google.api.http) = {
			get: "/general-ledger/accounts/schemas/{accounting_schema_id}/elements"
		};
	}
	rpc ListAccountingElementValues(ListAccountingElementValuesRequest) returns (data.ListLookupItemsResponse) {
		option (google.api.http) = {
			get: "/general-ledger/accounts/schemas/{accounting_schema_id}/elements/{element_type}"
		};
	}

	// Accounting Combination
	rpc getAccountingCombination(GetAccountingCombinationRequest) returns (data.Entity) {
		option (google.api.http) = {
			get: "/general-ledger/accounts/schemas/{accounting_schema_id}/combinations/{id}"
			additional_bindings: {
				get: "/general-ledger/accounts/schemas/{accounting_schema_id}/combinations/alias/{alias}"
			}
			// TODO: Deprecated
			additional_bindings: {
				get: "/general-ledger/accounts/combinations/combination/{value}"
			}
			additional_bindings: {
				get: "/general-ledger/accounts/combinations/combination/{value}"
			}
		};
	}
	rpc ListAccountingCombinations(ListAccountingCombinationsRequest) returns (data.ListEntitiesResponse) {
		option (google.api.http) = {
			get: "/general-ledger/accounts/schemas/{accounting_schema_id}/combinations"
			// TODO: Deprecated
			additional_bindings: {
				get: "/general-ledger/accounts/combinations"
			}
		};
	}
	rpc SaveAccountingCombination(SaveAccountingCombinationRequest) returns (data.Entity) {
		option (google.api.http) = {
			post: "/general-ledger/accounts/schemas/{accounting_schema_id}/combinations"
			body: "*"
			// TODO: Deprecated
			additional_bindings: {
				post: "/general-ledger/accounts/combinations",
				body: "*"
			}
		};
	}

	// Accounting Viewer
	rpc ListAccountingSchemas(ListAccountingSchemasRequest) returns (data.ListLookupItemsResponse) {
		option (google.api.http) = {
			get: "/general-ledger/accounts/schemas"
		};
	}
	rpc ListPostingTypes(ListPostingTypesRequest) returns (data.ListLookupItemsResponse) {
		option (google.api.http) = {
			get: "/general-ledger/accounts/posting-types"
		};
	}
	rpc ListOrganizations(ListOrganizationsRequest) returns (data.ListLookupItemsResponse) {
		option (google.api.http) = {
			get: "/general-ledger/organizations"
		};
	}
	rpc ListAccountingDocuments(ListAccountingDocumentsRequest) returns (ListAccountingDocumentsResponse) {
		option (google.api.http) = {
			get: "/general-ledger/accounts/documents"
		};
	}
	rpc ExistsAccountingDocument(ExistsAccountingDocumentRequest) returns (ExistsAccountingDocumentResponse) {
		option (google.api.http) = {
			get: "/general-ledger/accounts/facts/{accounting_schema_id}/document/{table_name}/{record_id}/exists"
		};
	}
	rpc ListAccountingFacts(ListAccountingFactsRequest) returns (data.ListEntitiesResponse) {
		option (google.api.http) = {
			get: "/general-ledger/accounts/facts/{accounting_schema_id}"
			additional_bindings: {
				get: "/general-ledger/accounts/facts/{accounting_schema_id}/document/{table_name}/{record_id}"
			}
		};
	}
	rpc StartRePost(StartRePostRequest) returns (StartRePostResponse) {
		option (google.api.http) = {
			post: "/general-ledger/accounts/facts/{table_name}/{record_id}",
			body: "*"
		};
	}

	// Conversion Rates
	rpc ListConversionTypes(ListConversionTypesRequest) returns (ListConversionTypesResponse) {
		option (google.api.http) = {
			get: "/general-ledger/conversion-types"
		};
	}
	rpc CreateConversionRate(CreateConversionRateRequest) returns (ConversionRate) {
		option (google.api.http) = {
			post: "/general-ledger/conversion-types/conversion-rates",
			body: "*"
		};
	}
}


// Accounting Element
message AccountingElement {
	string element_type = 1;
	string column_name = 2;
	string name = 3;
	bool is_mandatory = 4;
	bool is_balanced = 5;
	int32 sequece = 6;
	repeated string context_column_names = 7;
	int32 display_type = 8;
	int32 field_id = 9;
	int32 table_id = 10;
	string table_name = 11;
}
message ListAccountingElementsRequest {
	string filters = 1;
	string sort_by = 2;
	repeated string group_columns = 3;
	repeated string select_columns = 4;
	int32 page_size = 5;
	string page_token = 6;
	string search_value = 7;
	string context_attributes = 8;
	bool is_only_active_records = 9;
	bool is_without_validation = 10;
	google.protobuf.Value current_value = 11;
	// custom filters
	int32 accounting_schema_id = 12;
}
message ListAccountingElementsResponse {
	int64 record_count = 1;
	repeated AccountingElement accounting_elements = 2;
	string next_page_token = 3;
}


// Accounting Element Value
message AccountingElementValue {
	int32 id = 1;
	string value = 2;
	string dispay_value = 3;
}
message ListAccountingElementValuesRequest {
	string filters = 1;
	string sort_by = 2;
	repeated string group_columns = 3;
	repeated string select_columns = 4;
	int32 page_size = 5;
	string page_token = 6;
	string search_value = 7;
	string context_attributes = 8;
	bool is_only_active_records = 9;
	bool is_without_validation = 10;
	google.protobuf.Value current_value = 11;
	// Custom Filters
	int32 accounting_schema_id = 12;
	string element_type = 13;
}
message ListAccountingElementValuesResponse {
	int64 record_count = 1;
	repeated AccountingElementValue accounting_element_values = 2;
	string next_page_token = 3;
}


// Accounting Combination
message GetAccountingCombinationRequest {
	int32 id = 1;
	string alias = 2;
	int32 accounting_schema_id = 3;
}
message ListAccountingCombinationsRequest {
	string filters = 1;
	string sort_by = 2;
	repeated string group_columns = 3;
	repeated string select_columns = 4;
	int32 page_size = 5;
	string page_token = 6;
	string search_value = 7;
	string context_attributes = 8;
	bool is_only_active_records = 9;
	bool is_without_validation = 10;
	google.protobuf.Value current_value = 11;
	// custom filters
	int32 accounting_schema_id = 12;
	int32 organization_id = 13;
	int32 account_id = 14;
}
message SaveAccountingCombinationRequest {
	int32 accounting_schema_id = 3;
	int32 organization_id = 4;
	int32 account_id = 5;
	int32 client_id = 2; // TODO: Validate this
	int32 id = 1; // TODO: Validate this
	string alias = 6;
	google.protobuf.Struct context_attributes = 7; // TODO: Validate this
	google.protobuf.Struct attributes = 8;
}


// Accounting Schema
message ListAccountingSchemasRequest {
	string filters = 1;
	string sort_by = 2;
	repeated string group_columns = 3;
	repeated string select_columns = 4;
	int32 page_size = 5;
	string page_token = 6;
	string search_value = 7;
	string context_attributes = 8;
	bool is_only_active_records = 9;
	bool is_without_validation = 10;
	google.protobuf.Value current_value = 11;
}


// Posting Type
message ListPostingTypesRequest {
	string filters = 1;
	string sort_by = 2;
	repeated string group_columns = 3;
	repeated string select_columns = 4;
	int32 page_size = 5;
	string page_token = 6;
	string search_value = 7;
	string context_attributes = 8;
	bool is_only_active_records = 9;
	bool is_without_validation = 10;
	google.protobuf.Value current_value = 11;
}


// Accounting Document
message ListAccountingDocumentsRequest {
	string filters = 1;
	string sort_by = 2;
	repeated string group_columns = 3;
	repeated string select_columns = 4;
	int32 page_size = 5;
	string page_token = 6;
	string search_value = 7;
}
message AccountingDocument {
	int32 id = 1;
	string name = 2;
	string table_name = 3;
}
message ListAccountingDocumentsResponse {
	int64 record_count = 1;
	repeated AccountingDocument records = 2;
	string next_page_token = 3;
}


// Organization
message ListOrganizationsRequest {
	string filters = 1;
	string sort_by = 2;
	repeated string group_columns = 3;
	repeated string select_columns = 4;
	int32 page_size = 5;
	string page_token = 6;
	string search_value = 7;
	string context_attributes = 8;
	bool is_only_active_records = 9;
	bool is_without_validation = 10;
	google.protobuf.Value current_value = 11;
}

// Accounting Fact
message ExistsAccountingDocumentRequest {
	// mandatory filters
	int32 accounting_schema_id = 1;
	// document filters
	string table_name = 2;
	int32 record_id = 3;
}
message ExistsAccountingDocumentResponse {
	bool is_show_accounting = 1;
}

message ListAccountingFactsRequest {
	string filters = 1;
	string sort_by = 2;
	repeated string group_columns = 3;
	repeated string select_columns = 4;
	int32 page_size = 5;
	string page_token = 6;
	string search_value = 7;
	// mandatory filters
	int32 accounting_schema_id = 8;
	// optional filter
	string posting_type = 9;
	// document filters
	string table_name = 10;
	int32 record_id = 11;
	//
	google.protobuf.Timestamp date_from = 12;
	google.protobuf.Timestamp date_to = 13;
	int32 organization_id = 14;
}


// Start Re-Post
message StartRePostRequest {
	string table_name = 1;
	int32 record_id = 2;
	bool is_force = 3;
}
message StartRePostResponse {
	string error_msg = 1;
}


// Conversion Type
message ConversionType {
	int32 id = 1;
	string uuid = 2;
	string value = 3;
	string name = 4;
	string description = 5;
	bool is_default = 6;
	int32 parent_id = 7;
	int32 business_partner_id = 8;
	int32 order_id = 9;
	int32 invoice_id = 10;
	int32 payment_id = 11;
	int32 asset_addition_id = 12;
	int32 expedient_id = 13;
}
message ListConversionTypesRequest {
	string filters = 1;
	string sort_by = 2;
	repeated string group_columns = 3;
	repeated string select_columns = 4;
	int32 page_size = 5;
	string page_token = 6;
	string search_value = 7;
	string context_attributes = 8;
	bool is_only_active_records = 9;
	bool is_without_validation = 10;
	google.protobuf.Value current_value = 11;
	// custom filters
	google.protobuf.Timestamp date = 12;
	int32 business_partner_id = 13;
	int32 order_id = 14;
	int32 invoice_id = 15;
	int32 payment_id = 16;
	int32 asset_addition_id = 17;
	int32 expedient_id = 18;
}
message ListConversionTypesResponse {
	int64 record_count = 1;
	repeated ConversionType records = 2;
	string next_page_token = 3;
}


// Conversion Rate
message Currency {
	int32 id = 1;
	string uuid = 2;
	string iso_code = 3;
	string name = 4;
	string symbol = 5;
	int32 standard_precision = 6;
}
message ConversionRate {
	int32 id = 1;
	string uuid = 2;
	int32 organization_id = 3;
	Currency currency_from = 4;
	Currency currency_to = 5;
	google.protobuf.Timestamp valid_from = 6;
	google.protobuf.Timestamp valid_to = 7;
	string multiply_rate = 8;
	string divide_rate = 9;
	ConversionType conversion_type = 10;
}
message CreateConversionRateRequest {
	int32 organization_id = 1;
	int32 conversion_type_id = 2;
	google.protobuf.Timestamp date = 3;
	int32 currency_from_id = 4;
	int32 currency_to_id = 5;
	string negotiated_rate = 6;
	int32 business_partner_id = 7;
	int32 order_id = 8;
	int32 invoice_id = 9;
	int32 payment_id = 10;
	int32 asset_addition_id = 11;
	int32 expedient_id = 12;
}
