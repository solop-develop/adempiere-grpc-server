# This workflow will build and push Docker images on every commit
# Based on publish.yml but adapted for continuous deployment

name: Build and Push Docker Images

permissions:
  contents: read
  packages: write

on:
  push:
    branches:
      - '*'         # matches every branch that doesn't contain a '/'
      - '*/*'       # matches every branch containing a single '/'
      - '**'        # matches every branch
    paths-ignore:
      - README.md
      - README.es.md
      - '.github/**'
      - 'docs/**'

jobs:

  # Build dist application adempiere-grpc-server
  build-app:
    name: Build dist ADempiere gRPC Server
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Setup Java JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-package: 'jdk'
          java-version: 17
          architecture: x64

      - name: Setup Gradle 9
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-version: 9.0.0 # current

      - name: Set Version Properties
        run: |
          echo "MAIN_VERSION=${{ github.ref_name }}-${{ github.sha }}" >> src/main/java/org/spin/base/version.properties
          echo "DATE_VERSION=$(date +'%Y-%m-%d')" >> src/main/java/org/spin/base/version.properties
          echo "IMPLEMENTATION_VERSION=${{ github.sha }}" >> src/main/java/org/spin/base/version.properties

      - name: Run Create Release
        run: gradle createRelease --warning-mode all --stacktrace
        env:
          GITHUB_DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          GITHUB_DEPLOY_TOKEN: ${{ secrets.DEPLOY_TOKEN }}

      - name: Prepare flat artifacts
        run: |
          mkdir -p flat_artifacts/
          cp build/descriptors/adempiere-grpc-server.dsc flat_artifacts/ || echo "Warning: .dsc file not found"
          cp build/release/adempiere-grpc-server.* flat_artifacts/ || echo "Warning: release files not found"
          cp docker-compose/envoy/envoy.yaml flat_artifacts/ || echo "Warning: envoy.yaml not found"
          cp resources/env.yaml flat_artifacts/ || echo "Warning: env.yaml not found"
          ls -la flat_artifacts/

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: flat_artifacts/*
          retention-days: 1

  # Check secrets to push image in docker hub registry
  check-docker-secrets:
    name: Check if the registry information was set on secrets and variables
    needs:
      - build-app
    runs-on: ubuntu-latest
    outputs:
      is_have_secrets: ${{ steps.check_docker_hub_secrets_job.outputs.is_have_secrets }}
    steps:
      - id: check_docker_hub_secrets_job
        run: |
          if [[ "${{ vars.DOCKER_REGISTRY }}" != "" && \
                "${{ vars.DOCKER_REPO }}" != "" && \
                "${{ secrets.DOCKER_USERNAME }}" != "" && \
                "${{ secrets.DOCKER_TOKEN }}" != "" ]]; \
          then
            echo "Secrets to use a container registry are configured in the repo"
            echo "is_have_secrets=true" >> $GITHUB_OUTPUT
          else
            echo "Secrets to use a container registry were not configured in the repo"
            echo "is_have_secrets=false" >> $GITHUB_OUTPUT
          fi

  # Publish docker alpine image in Docker Hub Registry to application
  push-alpine-image-dhr:
    name: Push docker alpine image to Docker Hub
    needs:
      - check-docker-secrets
    # Skip step based on secret
    if: needs.check-docker-secrets.outputs.is_have_secrets == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Download dist artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts
          path: artifacts/

      - name: Unzip Asset
        run: |
          tree artifacts
          unzip artifacts/adempiere-grpc-server.zip -d docker/

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          # CONFIGURE DOCKER SECRETS INTO REPOSITORY
          registry: ${{ vars.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Set Docker Alpine Tags
        id: set_tags_alpine
        run: |
          # Get branch name and clean it for Docker tags
          BRANCH_NAME="${{ github.ref_name }}"
          # clean branch name (clear invalid characters to Docker tags)
          CLEAN_BRANCH_NAME=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9._-]/-/g')

          # Set the tag with branch name
          TAGS="${{ vars.DOCKER_REGISTRY }}/${{ vars.DOCKER_REPO }}:$CLEAN_BRANCH_NAME-alpine"

          # Set the output variable for the next step to use
          echo "tags_to_push=$TAGS" >> $GITHUB_OUTPUT

      - name: Push alpine image in Docker Hub
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/alpine.Dockerfile
          push: true
          tags: ${{ steps.set_tags_alpine.outputs.tags_to_push }}

  # Publish docker image multiplatform in Docker Hub Registry to application
  push-image-dhr:
    name: Push docker image to Docker Hub
    needs:
      - check-docker-secrets
    # Skip step based on secret
    if: needs.check-docker-secrets.outputs.is_have_secrets == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Download dist artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts
          path: artifacts/

      - name: Unzip Asset
        run: |
          tree artifacts
          unzip artifacts/adempiere-grpc-server.zip -d docker/

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          # CONFIGURE DOCKER SECRETS INTO REPOSITORY
          registry: ${{ vars.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Set Docker Tags
        id: set_tags
        run: |
          # Get branch name and clean it for Docker tags
          BRANCH_NAME="${{ github.ref_name }}"
          # clean branch name (clear invalid characters to Docker tags)
          CLEAN_BRANCH_NAME=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9._-]/-/g')

          # Set the tag with branch name
          TAGS="${{ vars.DOCKER_REGISTRY }}/${{ vars.DOCKER_REPO }}:$CLEAN_BRANCH_NAME"

          # Set the output variable for the next step to use
          echo "tags_to_push=$TAGS" >> $GITHUB_OUTPUT

      - name: Push image in Docker Hub
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/ubuntu.Dockerfile
          platforms: linux/amd64,linux/amd64/v2
          # platforms: linux/amd64,linux/amd64/v2,linux/arm64/v8
          push: true
          tags: ${{ steps.set_tags.outputs.tags_to_push }}

  # Publish docker image multiplatform in Docker Hub Registry to application
  push-grpc-proxy-image-dhr:
    name: Push grpc-proxy docker image to Docker Hub
    needs:
      - check-docker-secrets
    # Skip step based on secret
    if: needs.check-docker-secrets.outputs.is_have_secrets == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Download dist artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts
          path: artifacts/

      - name: Move descriptor
        run: |
          tree artifacts
          cp artifacts/adempiere-grpc-server.dsc docker/ || echo "Warning: descriptor file not found"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          # CONFIGURE DOCKER SECRETS INTO REPOSITORY
          registry: ${{ vars.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Set Docker Tags
        id: set_envoy_tags
        run: |
          # Get branch name and clean it for Docker tags
          BRANCH_NAME="${{ github.ref_name }}"
          # clean branch name (clear invalid characters to Docker tags)
          CLEAN_BRANCH_NAME=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9._-]/-/g')

          # Set the tag with branch name
          TAGS="${{ vars.DOCKER_REGISTRY }}/${{ vars.DOCKER_REPO_PROXY }}:$CLEAN_BRANCH_NAME"

          # Set the output variable for the next step to use
          echo "tags_to_push=$TAGS" >> $GITHUB_OUTPUT

      - name: Push image in Docker Hub
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/grpc_proxy.Dockerfile
          platforms: linux/amd64,linux/amd64/v2,linux/arm64/v8
          push: true
          tags: ${{ steps.set_envoy_tags.outputs.tags_to_push }}